🧑‍💻 Självständiga Express + PostgreSQL-övningar

🧠 Mål:

Träna på att bygga REST API med Express

Ansluta till PostgreSQL med pg-modulen

Utföra CRUD-operationer mot riktiga databastabeller

Testa API-anrop med Postman

📝 Instruktioner för alla övningar:

Skapa en ny Express-app (npm init, npm install express pg)

Skapa en databas i pgAdmin och tabeller enligt ditt scenario

Skriv rutter för GET, POST, PUT, DELETE

Testa alla rutter i Postman

🟢 Lätt nivå

1. Enkel användarhantering

Tabell:
users (id, name, email)

Uppgift:
Skapa ett API med fyra rutter:

GET /users – hämta alla

POST /users – skapa ny användare

PUT /users/:id – uppdatera namn och e-post

DELETE /users/:id – ta bort användare

------------------------------
2. Produktregister

Tabell:
products (id, name, price)

Uppgift:
Bygg API med samma fyra CRUD-rutter

Filtrera produkter på pris i GET-route (t.ex. ?min=100)

--------------------------------------
🟠 Medel nivå

1. Blogg-API

Tabeller:
users (id, name)

posts (id, title, content, user_id)

Relation:
1–M: en användare kan ha flera inlägg

Uppgift:
Skapa routes för att:

Lista alla inlägg

Skapa nytt inlägg kopplat till en användare

Uppdatera ett inlägg

Hämta alla inlägg för en viss användare (t.ex. /users/:id/posts)

--------------------------------------

2. Kund & beställning

Tabeller:
customers (id, name)

orders (id, customer_id, total)

Relation:
1–M: en kund kan ha flera ordrar

Uppgift:
Skapa CRUD för båda entiteterna

Skapa en route: GET /customers/:id/orders som listar kundens ordrar med JOIN

--------------------------------------
🔴 Svår nivå

1. Order & produkt med many-to-many

Tabeller:
orders (id, customer_name)

products (id, name, price)

order_items (order_id, product_id, quantity)

Relationer:
M–M mellan orders ↔ products via order_items

Uppgift:
Skapa CRUD för alla tre tabeller

GET /orders/:id/details ska visa alla produkter i en order (med JOIN)

--------------------------------------
2. Schema med inloggade användare och inlägg

Tabeller:
users (id, name, email)

posts (id, title, content, user_id)

likes (user_id, post_id)

Relationer:
1–M: users → posts

M–M: users ↔ posts (likes)

Uppgift:
Skapa CRUD för alla tre tabeller

Skapa en route: GET /posts/:id/likes → visar alla användare som gillat ett inlägg

Bonus: förhindra att samma användare gillar samma post mer än en gång